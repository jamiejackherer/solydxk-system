#!/bin/bash

PARTITION=$1
PASSPHRASE=$2
COMMANDS=$3

TARGET='/target'

if [ -z $PARTITION ] || [ ! -e $PARTITION ]; then
  echo "An existing OS partition path is needed"
  echo "E.g.: chroot-partition /dev/sda1"
  echo
  echo "If the partition is a LUKS encrypted partition:"
  echo "chroot-partition /dev/sda1 my_passphrase"
  echo
  echo "You can run a command:"
  echo "chroot-partition /dev/sda1 \"\" \"command 1;command 2\""
  echo "chroot-partition /dev/sda1 my_passphrase \"command 1;command 2\""
  echo
  echo "List all partitions with: sudo fdisk -l"
  exit
fi


# Check if partition is already mounted and use that as the target
MOUNTCHK=$(grep "$PARTITION " /proc/mounts | awk '{print $2}')
if [ "$MOUNTCHK" != "" ]; then
  TARGET=$MOUNTCHK
fi

# Check if target is used as mount point by anything other than partition
MOUNTCHK=$(grep " $TARGET " /proc/mounts | grep -v "$PARTITION")
if [ "$MOUNTCHK" != "" ]; then
  echo "$TARGET in use - exiting"
  exit
fi

# Be root to run this script
if [ $UID -ne 0 ]; then
  sudo $0 $@
  exit
fi

# Create temporary dir
if [ ! -d $TARGET ]; then
  echo "Create directory $TARGET"
  mkdir $TARGET
fi

# Map luks encrypted partition
echo "Map encrypted partition $PARTITION"
FS=$(blkid -s TYPE -o value $PARTITION)
if [ "$FS" == 'crypto_LUKS' ]; then
  PNAME=$(basename $PARTITION)
  if [ "$PASSPHRASE" != '' ]; then
    printf "$PASSPHRASE" | cryptsetup open --type luks $PARTITION $PNAME
  else
    cryptsetup open --type luks $PARTITION $PNAME
  fi
  if [ ! -e "/dev/mapper/$PNAME" ]; then
    echo "Unable to map encrypted partition $PARTITION - exiting"
    exit
  fi
  PARTITION="/dev/mapper/$PNAME"
fi

# Mounting
echo "Mounting $PARTITION on $TARGET"
mount $PARTITION $TARGET

if [ ! -e $TARGET/dev ] || [ ! -e $TARGET/sys ]; then
  echo "Could not find $TARGET/dev and $TARGET/sys - exiting"
  umount $TARGET
  rmdir $TARGET
  exit
fi

MOUNTCHK=$(grep "$TARGET" /proc/mounts | awk '{print $2}')
if [[ ! "$MOUNTCHKT" =~ '$TARGET/dev' ]]; then
  mount --bind /dev/ $TARGET/dev
  mount --bind /dev/shm $TARGET/dev/shm
  mount --bind /dev/pts $TARGET/dev/pts
  UMOUNTS="$TARGET/dev $TARGET/dev/shm $TARGET/dev/pts"
fi
if [[ ! "$MOUNTCHKT" =~ '$TARGET/sys' ]]; then
  mount --bind /sys/ $TARGET/sys
  mount --bind /sys/fs/fuse/connections $TARGET/sys/fs/fuse/connections
  UMOUNTS="$UMOUNTS $TARGET/sys $TARGET/sys/fs/fuse/connections"
fi
if [[ ! "$MOUNTCHKT" =~ '$TARGET/proc' ]]; then
  mount --bind /proc/ $TARGET/proc
  UMOUNTS="$UMOUNTS $TARGET/proc"
fi
if [[ ! "$MOUNTCHKT" =~ '$TARGET/etc/resolv.conf' ]]; then
  mount --bind /etc/resolv.conf $TARGET/etc/resolv.conf
  UMOUNTS="$UMOUNTS $TARGET/etc/resolv.conf"
fi


# Chroot into dir
echo "Chrooting into $TARGET"
# Mount all partitions in the chrooted fstab
chroot $TARGET/ /bin/sh -c "mount -a 2>/dev/null"
# Execute any passed commands
if [ "$COMMANDS" != "" ]; then
  chroot $TARGET/ /bin/sh -c "$COMMANDS"
fi
# If the last command wasn't exit, keep the chrooted partition open
if [ "${commands: -4}" != "exit" ]; then
  chroot $TARGET
fi

# Unmount when done
umount -f $UMOUNTS 2>/dev/null
grep "$TARGET" /proc/mounts | grep ^/dev | grep -v "$PARTITION" | awk '{print $1}' | xargs umount -f 2>/dev/null

if [ "$TARGET" == "/target" ]; then
  echo "Unmounting $TARGET"
  umount -lf $TARGET
  rmdir $TARGET 2>/dev/null
fi
